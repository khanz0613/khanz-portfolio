'use client';\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\nimport Link from 'next/link';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'default' | 'outline' | 'ghost' | 'destructive';\n  size?: 'sm' | 'md' | 'lg';\n  href?: string;\n  children: React.ReactNode;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant = 'default', size = 'md', href, children, ...props }, ref) => {\n    const baseStyles = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50';\n    \n    const variants = {\n      default: 'bg-blue-600 text-white hover:bg-blue-700 focus-visible:ring-blue-500',\n      outline: 'border border-gray-300 bg-transparent hover:bg-gray-50 dark:border-gray-600 dark:hover:bg-gray-800',\n      ghost: 'hover:bg-gray-100 dark:hover:bg-gray-800',\n      destructive: 'bg-red-600 text-white hover:bg-red-700 focus-visible:ring-red-500'\n    };\n    \n    const sizes = {\n      sm: 'h-9 px-3 text-sm',\n      md: 'h-10 px-4 py-2',\n      lg: 'h-11 px-8 text-lg'\n    };\n    \n    const classes = cn(\n      baseStyles,\n      variants[variant],\n      sizes[size],\n      className\n    );\n    \n    if (href) {\n      return (\n        <Link href={href} className={classes}>\n          {children}\n        </Link>\n      );\n    }\n    \n    return (\n      <button className={classes} ref={ref} {...props}>\n        {children}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport { Button };